version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - 'bash -lc "set -euo pipefail; echo Using Node: $(node -v); echo Using npm: $(npm -v)"'

  pre_build:
    commands:
      - 'echo Building shared-ts layer...'
      - |
        if [ -n "${CODEARTIFACT_REPO_ENDPOINTS:-}" ]; then
          NPM_ENDPOINT=$(node -e 'const j=process.env.CODEARTIFACT_REPO_ENDPOINTS?JSON.parse(process.env.CODEARTIFACT_REPO_ENDPOINTS):{}; if(!j.npm){process.exit(2)}; console.log(j.npm)')
          NPM_HOST=$(node -e 'const u=new URL(process.env.NPM_ENDPOINT); console.log(u.host + u.pathname)')
          CA_DOMAIN="${PROJECT_DOMAIN:-${PROJECT_NAME:-project}-domain}"
          CA_TOKEN=$(aws codeartifact get-authorization-token --domain "$CA_DOMAIN" --query authorizationToken --output text || true)
          if [ -n "${CA_TOKEN:-}" ]; then
            printf "//%s:_authToken=%s\n" "$NPM_HOST" "$CA_TOKEN" > ~/.npmrc
            echo "registry=$NPM_ENDPOINT" >> ~/.npmrc
            echo "always-auth=true" >> ~/.npmrc
          fi
        fi
      - '[ -d "$CODEBUILD_SRC_DIR/packages/shared-ts" ] || { echo "shared-ts not found"; exit 2; }'
      - 'cd "$CODEBUILD_SRC_DIR/packages/shared-ts"'
      - 'pwd; ls -la'
      - 'npm ci'
      - 'DATABASE_URL="postgresql://user:pass@localhost:5432/postgres?schema=public" npx prisma generate'
      - 'npm run build'
      - 'npm prune --omit=dev'
      - 'mkdir -p /tmp/layer/nodejs'
      - 'cp -R dist /tmp/layer/nodejs/'
      - 'cp package.json /tmp/layer/nodejs/'
      - '[ -d "node_modules" ] && cp -R node_modules /tmp/layer/nodejs/ || echo "No local node_modules, using hoisted deps"'
      - 'echo "Layer contents after copy:" && ls -la /tmp/layer/nodejs/'

  build:
    commands:
      - 'cd /tmp/layer'
      - 'zip -r shared-ts-layer.zip .'
      - '[ -n "${CODE_BUCKET:-}" ] || { echo "ERROR: CODE_BUCKET env var is not set"; exit 1; }'
      - 'aws s3 cp shared-ts-layer.zip s3://$CODE_BUCKET/shared-ts-layer.zip'
      - 'echo Uploaded layer to s3://$CODE_BUCKET/shared-ts-layer.zip'
      - 'cd "$CODEBUILD_SRC_DIR"'
      - |
        # Create outbox-stream-handler.zip in root directory
        echo "Creating outbox-stream-handler.zip..."
        mkdir -p outbox-stream-handler
        if [ -d "/tmp/layer/nodejs/dist/lambdas" ]; then
          cp -r /tmp/layer/nodejs/dist/lambdas/* outbox-stream-handler/
        else
          echo "No lambdas directory found, creating basic handler"
          echo 'const { OutboxStreamHandler } = require("@lawprotect/shared-ts");' > outbox-stream-handler/index.js
          echo '' >> outbox-stream-handler/index.js
          echo 'exports.handler = OutboxStreamHandler;' >> outbox-stream-handler/index.js
        fi
        cp /tmp/layer/nodejs/package.json outbox-stream-handler/
        cd outbox-stream-handler && zip -r ../outbox-stream-handler.zip . && cd ..
        rm -rf outbox-stream-handler
        echo "Created outbox-stream-handler.zip"
      - |
        # Use dynamic function name from Terraform
        FUNCTION_NAME="${OUTBOX_FUNCTION_NAME}"
        
        echo "Using function name: $FUNCTION_NAME"
        
        # Upload the handler ZIP to S3 (Lambda will automatically use it)
        echo "Uploading outbox-stream-handler.zip to S3..."
        aws s3 cp outbox-stream-handler.zip s3://$CODE_BUCKET/outbox-stream-handler.zip
        
        # Update the Lambda function to use the new code from S3
        echo "Updating Lambda function code..."
        aws lambda update-function-code \
          --function-name "$FUNCTION_NAME" \
          --s3-bucket "$CODE_BUCKET" \
          --s3-key "outbox-stream-handler.zip"
        
        echo "Lambda function updated successfully"
        echo "Verifying artifacts in root directory:"
        ls -la outbox-stream-handler.zip

artifacts:
  files:
    - 'outbox-stream-handler.zip'
  discard-paths: yes

version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - 'bash -lc "set -euo pipefail; echo Using Node: $(node -v); echo Using npm: $(npm -v)"'

  pre_build:
    commands:
      - 'echo Building shared-ts layer...'
      - |
        if [ -n "${CODEARTIFACT_REPO_ENDPOINTS:-}" ]; then
          NPM_ENDPOINT=$(node -e 'const j=process.env.CODEARTIFACT_REPO_ENDPOINTS?JSON.parse(process.env.CODEARTIFACT_REPO_ENDPOINTS):{}; if(!j.npm){process.exit(2)}; console.log(j.npm)')
          NPM_HOST=$(node -e 'const u=new URL(process.env.NPM_ENDPOINT); console.log(u.host + u.pathname)')
          CA_DOMAIN="${PROJECT_DOMAIN:-${PROJECT_NAME:-project}-domain}"
          CA_TOKEN=$(aws codeartifact get-authorization-token --domain "$CA_DOMAIN" --query authorizationToken --output text || true)
          if [ -n "${CA_TOKEN:-}" ]; then
            printf "//%s:_authToken=%s\n" "$NPM_HOST" "$CA_TOKEN" > ~/.npmrc
            echo "registry=$NPM_ENDPOINT" >> ~/.npmrc
            echo "always-auth=true" >> ~/.npmrc
          fi
        fi
      - 'cd packages/shared-ts'
      - 'npm ci'
      - 'DATABASE_URL="postgresql://user:pass@localhost:5432/postgres?schema=public" npx prisma generate'
      - 'npm run build'
      - 'npm prune --omit=dev'
      - 'cd -'
      - 'rm -rf /tmp/layer && mkdir -p /tmp/layer/nodejs'
      - 'cp -R packages/shared-ts/dist /tmp/layer/nodejs/'
      - 'if [ -d "packages/shared-ts/node_modules" ]; then cp -R packages/shared-ts/node_modules /tmp/layer/nodejs/; fi'
      - 'cp packages/shared-ts/package.json /tmp/layer/nodejs/'
      - 'if [ -f "packages/shared-ts/package-lock.json" ]; then cp packages/shared-ts/package-lock.json /tmp/layer/nodejs/; fi'

  build:
    commands:
      - 'cd /tmp/layer'
      - 'zip -r shared-ts-layer.zip .'
      - '[ -n "${CODE_BUCKET:-}" ] || { echo "ERROR: CODE_BUCKET env var is not set"; exit 1; }'
      - 'aws s3 cp shared-ts-layer.zip s3://$CODE_BUCKET/shared-ts-layer.zip'
      - 'echo Uploaded layer to s3://$CODE_BUCKET/shared-ts-layer.zip'
      - 'cd -'
      - |
        # Create outbox-stream-handler.zip in root directory
        echo "Creating outbox-stream-handler.zip..."
        mkdir -p outbox-stream-handler
        cp -r /tmp/layer/nodejs/dist/lambdas/* outbox-stream-handler/
        cp /tmp/layer/nodejs/package.json outbox-stream-handler/
        cd outbox-stream-handler && zip -r ../outbox-stream-handler.zip . && cd ..
        rm -rf outbox-stream-handler
        echo "Created outbox-stream-handler.zip"
      - |
        # 1) Check if Lambda function exists
        echo "Checking if Lambda function exists..."
        if aws lambda get-function --function-name lawprotect365-outbox-stream-handler-stg-stg >/dev/null 2>&1; then
          echo "Function exists, updating code..."
          aws lambda update-function-code \
            --function-name lawprotect365-outbox-stream-handler-stg-stg \
            --zip-file fileb://outbox-stream-handler.zip
          
          echo "Publishing new version..."
          TARGET_VERSION=$(aws lambda publish-version \
            --function-name lawprotect365-outbox-stream-handler-stg-stg \
            --query Version --output text)
        else
          echo "Function does not exist, skipping Lambda operations"
          TARGET_VERSION="1"
        fi
        
        # 2) Get current version from alias (with error handling)
        echo "Getting current version from alias..."
        CURRENT_VERSION=$(aws lambda get-alias \
          --function-name lawprotect365-outbox-stream-handler-stg-stg \
          --name outbox-stream-handler-alias \
          --query FunctionVersion --output text 2>/dev/null || echo "1")
        
        echo "CurrentVersion=$CURRENT_VERSION  TargetVersion=$TARGET_VERSION"
        
        # 3) Generate appspec.yml with both versions
        cat > appspec.yml << EOF
        version: 0.0
        Resources:
          - OutboxHandler:
              Type: AWS::Lambda::Function
              Properties:
                Name: "lawprotect365-outbox-stream-handler-stg-stg"
                Alias: "outbox-stream-handler-alias"
                CurrentVersion: "$CURRENT_VERSION"
                TargetVersion: "$TARGET_VERSION"
        EOF
        echo "Created appspec.yml for CodeDeploy with versions"

artifacts:
  files:
    - 'outbox-stream-handler.zip'
    - 'appspec.yml'
  discard-paths: yes

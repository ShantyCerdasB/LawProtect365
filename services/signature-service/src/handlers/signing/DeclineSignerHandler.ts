/**
 * @fileoverview DeclineSignerHandler - Handler for signer decline
 * @summary Handles signer decline with reason and status updates
 * @description This handler processes signer decline including reason capture,
 * status updates, and envelope completion handling.
 */

import { ControllerFactory } from '@lawprotect/shared-ts';
import { DeclineSignerRequestSchema } from '../../domain/schemas/SigningHandlersSchema';
import { ServiceFactory } from '../../infrastructure/factories/ServiceFactory';
import { SignerService } from '../../services/SignerService';
import { InvitationTokenService } from '../../services/InvitationTokenService';
import { InvitationToken } from '../../domain/entities/InvitationToken';
import { Signer } from '../../domain/entities/Signer';

/**
 * DeclineSignerHandler - Production-ready handler using ControllerFactory
 * 
 * This handler processes signer decline including reason capture, status updates,
 * and envelope completion handling. It uses ControllerFactory with a comprehensive
 * middleware pipeline.
 * 
 * @middleware
 * - Request validation: Validates request body and parameters
 * - Token validation: Validates invitation token exists and is not expired
 * - Service orchestration: Coordinates between domain services
 * - Response formatting: Transforms domain entities to API response format
 * 
 * @flow
 * 1. Token Validation - Validates invitation token from request body
 * 2. Decline Processing - Processes signer decline using SignerService
 * 3. Status Updates - Updates signer and envelope status as needed
 * 4. Response Assembly - Returns complete decline confirmation
 * 
 * @responsibilities
 * - Token Validation: Validates invitation tokens for decline operations
 * - Decline Processing: Processes signer decline with business rules
 * - Status Management: Updates signer and envelope status appropriately
 * - Response Formatting: Transforms domain entities to API response format
 * 
 * @exclusions
 * - Business Rules: Handled by SignerService
 * - Status Updates: Handled by SignerService
 * - Audit Events: Generated by individual services
 */
export const declineSignerHandler = ControllerFactory.createCommand({
  // Validation schemas
  bodySchema: DeclineSignerRequestSchema,
  
  // Authentication configuration
  requireAuth: true,
  includeSecurityContext: true,
  
  // Parameter extraction
  extractParams: (_path: any, body: any, _query: any, context: any) => ({
    requestBody: body,
    securityContext: context.securityContext
  }),
  
  // Service configuration - use domain services directly
  appServiceClass: class {
    constructor() {
      this.signerService = ServiceFactory.createSignerService();
      this.invitationTokenService = ServiceFactory.createInvitationTokenService();
    }
    
    private readonly signerService: SignerService;
    private readonly invitationTokenService: InvitationTokenService;
    
    async execute(params: { requestBody: any; securityContext: any }) {
      const { requestBody, securityContext } = params;
      
      // Log the entire security context for debugging
      console.log('üîç DeclineSignerHandler - Full securityContext:', securityContext);
      
      // Validate invitation token (validation handled by service)
      const tokenValidation: InvitationToken = await this.invitationTokenService.validateInvitationToken(requestBody.invitationToken);
      
      // Extract values from security context (now provided by middleware)
      const { ipAddress, userAgent, country } = securityContext;
      
      // Log extracted values for debugging
      console.log('üîç DeclineSignerHandler - Extracted values:', {
        ipAddress,
        userAgent,
        country,
        source: 'securityContext'
      });
      
      // Process signer decline using existing SignerService
      const updatedSigner: Signer = await this.signerService.declineSigner({
        signerId: tokenValidation.getSignerId(),
        reason: requestBody.reason,
        ipAddress,
        userAgent,
        userId: 'external-user' // External user via invitation token
      });
      
      // Return decline confirmation without accessing envelope
      // The envelope status will be updated by the SignerService if needed
      const envelopeId = tokenValidation.getEnvelopeId();
      
      return {
        message: 'Document declined successfully',
        decline: {
          signerId: updatedSigner.getId().getValue(),
          envelopeId: envelopeId.getValue(),
          reason: requestBody.reason,
          declinedAt: updatedSigner.getDeclinedAt()?.toISOString() || new Date().toISOString(),
          envelopeStatus: 'SENT' // Default status, will be updated by business logic if needed
        }
      };
    }
  },
  
  // Response configuration
  responseType: 'ok'
});
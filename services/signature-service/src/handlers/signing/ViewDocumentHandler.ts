/**
 * @fileoverview ViewDocumentHandler - Handler for document viewing
 * @summary Handles document viewing with invitation token validation
 * @description This handler provides secure access to documents for external signers
 * using invitation tokens without requiring authentication.
 */

import { ControllerFactory } from '@lawprotect/shared-ts';
import { InvitationTokenPathSchema } from '../../domain/schemas/SigningHandlersSchema';
import { ServiceFactory } from '../../infrastructure/factories/ServiceFactory';
import { DocumentAccessService } from '../../services/DocumentAccessService';

/**
 * ViewDocumentHandler - Production-ready handler using ControllerFactory
 * 
 * This handler provides secure access to documents for external signers using
 * invitation tokens. It uses ControllerFactory with a comprehensive middleware
 * pipeline.
 * 
 * @middleware
 * - Request validation: Validates invitation token format
 * - Token validation: Validates token exists and is not expired
 * - Service orchestration: Coordinates between domain services
 * - Response formatting: Transforms domain entities to API response format
 * 
 * @flow
 * 1. Token Validation - Validates invitation token from path parameters
 * 2. Document Access - Retrieves document information from S3Service
 * 3. URL Generation - Generates presigned URL for secure document access
 * 4. Response Assembly - Returns complete document access information
 * 
 * @responsibilities
 * - Token Validation: Validates invitation tokens for document access
 * - Document Access: Provides secure access to documents via presigned URLs
 * - URL Generation: Generates time-limited presigned URLs
 * - Response Formatting: Transforms domain entities to API response format
 * 
 * @exclusions
 * - Document Storage: Handled by S3Service
 * - Token Management: Handled by InvitationTokenService
 * - Audit Events: Generated by individual services
 */
export const viewDocumentHandler = ControllerFactory.createCommand({
  requireAuth: false,
  includeSecurityContext: true,
  // Validation schemas
  pathSchema: InvitationTokenPathSchema,
  
  // Parameter extraction
  extractParams: (path: any, _body: any, query: any, context: any) => ({
    invitationToken: path.invitationToken,
    // Allow caller to override TTL for share links (falls back to config)
    expiresIn: query && query.expiresIn ? Number(query.expiresIn) : undefined,
    securityContext: context.securityContext
  }),
  
  // Service configuration - use domain services directly
  appServiceClass: class {
    constructor() {
      this.documentAccessService = ServiceFactory.createDocumentAccessService();
    }
    
    private documentAccessService: DocumentAccessService;
    
    async execute(params: { invitationToken: string; expiresIn?: number; securityContext: any }) {
      const { invitationToken, expiresIn, securityContext } = params;
      return await this.documentAccessService.generateViewLinkForInvitation({
        invitationToken,
        requestedTtlSeconds: expiresIn,
        securityContext
      });
    }
  },
  
  // Response configuration
  responseType: 'ok'
});
/**
 * @fileoverview CreateEnvelopeHandler - Handler for creating new envelopes with signers
 * @summary Handles envelope creation orchestration with signers and invitation tokens
 * @description This handler orchestrates the creation of a new envelope with all signers included,
 * generates invitation tokens for external signers, and validates business rules. It coordinates
 * between EnvelopeService, SignerService, and InvitationTokenService to ensure proper business flow.
 */

import { ControllerFactory, UserRole, VALID_COGNITO_ROLES } from '@lawprotect/shared-ts';
import { CreateEnvelopeWithSignersSchema } from '../../domain/schemas/EnvelopeSchema';
import { EnvelopeService } from '../../services/EnvelopeService';
import { SignerService } from '../../services/SignerService';
import { InvitationTokenService } from '../../services/InvitationTokenService';
import { ServiceFactory } from '../../infrastructure/factories/ServiceFactory';


/**
 * CreateEnvelopeHandler - Production-ready handler using ControllerFactory
 *
 * @description This handler orchestrates envelope creation with signers and invitation tokens.
 * It coordinates between EnvelopeService, SignerService, and InvitationTokenService to ensure
 * proper business flow and creates all necessary entities for document signing workflow.
 *
 * @middleware
 * - JWT Authentication: Validates user identity and token validity
 * - Role validation: Ensures user has appropriate role permissions
 * - Signature permission validation: Validates MANAGE permissions for envelope creation
 * - Request validation: Validates request body using CreateEnvelopeWithSignersSchema
 * - Service orchestration: Coordinates between domain services
 * - Response formatting: Transforms domain entities to API response format
 *
 * @flow
 * 1. Envelope Creation - Creates envelope using EnvelopeService (publishes envelope.created event)
 * 2. Signer Creation - Creates signers using SignerService (publishes signer.created events)
 * 3. Token Generation - Generates invitation tokens using InvitationTokenService (no events published)
 * 4. Response Assembly - Returns complete envelope with signers and tokens
 *
 * @responsibilities
 * - Envelope Creation: Creates envelope with metadata and business rules validation
 * - Signer Management: Creates all signers with proper order assignment
 * - Token Generation: Generates secure invitation tokens for external signers
 * - Event Publishing: Publishes envelope.created and signer.created events
 * - Business Validation: Validates business rules and constraints
 * - Response Formatting: Transforms domain entities to API response format
 *
 * @exclusions
 * - Email Notifications: Events published but emails sent by NotificationService
 * - Document Storage: Handled by Document Service
 * - Document Processing: Handled by Document Service
 * - Audit Events: Generated by individual services
 * - Permission Validation: Handled by middleware pipeline
 *
 * @signingOrder
 * - OWNER_FIRST: Owner signs first (order 1), then all invited signers (no specific order)
 * - INVITEES_FIRST: All invited signers sign first (no specific order), then owner signs last
 * - Signers are created with proper order assignment based on signing order type
 */
export const createEnvelopeHandler = ControllerFactory.createCommand({
  // Validation schemas
  bodySchema: CreateEnvelopeWithSignersSchema,
  
  // Service configuration - use domain services directly
  appServiceClass: class {
    private readonly envelopeService: EnvelopeService;
    private readonly signerService: SignerService;
    private readonly invitationTokenService: InvitationTokenService;

    constructor() {
      // Create domain services with proper dependencies using ServiceFactory
      this.envelopeService = ServiceFactory.createEnvelopeService();
      this.signerService = ServiceFactory.createSignerService();
      this.invitationTokenService = ServiceFactory.createInvitationTokenService();
    }

    /**
     * Executes the envelope creation orchestration
     * 
     * @param params - Extracted parameters from request
     * @returns Promise resolving to created envelope, signers, and invitation tokens
     */
    async execute(params: any) {
      // 1. Create envelope (automatically publishes envelope.created event)
      const envelope = await this.envelopeService.createEnvelope(
        params.envelopeData,
        params.userId,
        params.securityContext
      );

      // 2. Create signers (automatically publishes signer.created events)
      const signers = await this.signerService.createSignersForEnvelope(
        envelope.getId(),
        params.signersData,
        params.securityContext,
        params.actorEmail
      );

      // 3. Generate invitation tokens (NO events published - will be published when envelope is sent)
      const invitationTokens = await this.invitationTokenService
        .generateInvitationTokensForSigners(
          signers,
          envelope.getId(),
          params.securityContext,
          params.actorEmail
        );

      return {
        envelope,
        signers,
        invitationTokens
      };
    }
  },
  
  // Parameter extraction - transforms HTTP request to domain parameters
  extractParams: (_path: any, body: any, _query: any, context: any) => ({
    envelopeData: {
      documentHash: body.documentId, // Frontend sends documentId according to schema
      s3Key: body.s3Key, // Frontend sends s3Key for document location
      title: body.metadata.title,
      description: body.metadata.description,
      expiresAt: body.metadata.expiresAt,
      customFields: body.metadata.customFields,
      tags: body.metadata.tags,
      reminders: body.metadata.reminders
    },
    signersData: body.signers || [], // Array of signers to be created
    userId: context.auth.userId, // Authenticated user ID
    securityContext: context.securityContext, // Security context from middleware
    actorEmail: context.auth?.email
  }),
  
  // Response configuration
  responseType: 'created',
  transformResult: async (result: any) => {
    // Transform domain entities to API response format
    // eslint-disable-next-line no-console
    console.log('[CreateEnvelopeHandler] Transforming result', {
      envelopeId: result?.envelope?.getId?.().getValue?.(),
      hasSigners: Array.isArray(result?.signers) ? result.signers.length : undefined
    });
    return {
      envelopeId: result.envelope.getId().getValue(),
      envelope: {
        id: result.envelope.getId().getValue(),
        status: result.envelope.getStatus(),
        title: result.envelope.getMetadata().title,
        description: result.envelope.getMetadata().description,
        expiresAt: result.envelope.getMetadata().expiresAt,
        createdAt: result.envelope.getCreatedAt()
      },
      signers: result.signers.map((s: any) => ({
        id: s.getId().getValue(),
        email: s.getEmail().getValue(),
        fullName: s.getFullName(),
        status: s.getStatus(),
        order: s.getOrder()
      })),
      invitationTokens: result.invitationTokens.map((t: any) => ({
        token: t.getToken(),
        signerId: t.getSignerId().getValue(),
        expiresAt: t.getExpiresAt()
      }))
    };
  },
  
  // Security configuration
  requireAuth: true, // Requires JWT authentication
  requiredRoles: [...VALID_COGNITO_ROLES] as UserRole[], // Allowed user roles
  includeSecurityContext: true // Include security context in request
});
/**
 * @fileoverview GetEnvelopesByUserHandler - Handler for listing user envelopes
 * @summary Handles envelope listing with complete signer information and pagination
 * @description This handler processes requests to list envelopes for authenticated users
 * with complete signer information, filtering, and pagination support.
 */

import { ControllerFactory, VALID_COGNITO_ROLES } from '@lawprotect/shared-ts';
import { CompositionRoot } from '../../infrastructure/factories';
import { GetEnvelopesByUserQuerySchema } from '../../domain/schemas/EnvelopeSchema';

/**
 * GetEnvelopesByUserHandler - Production-ready handler using ControllerFactory
 *
 * @description This handler lists envelopes for authenticated users with complete signer information.
 * It supports filtering by status, pagination with cursor-based approach, and always includes
 * complete signer information for comprehensive envelope details.
 *
 * @middleware
 * - JWT Authentication: Validates user identity and token validity
 * - Role validation: Ensures user has appropriate role permissions
 * - Request validation: Validates request parameters using GetEnvelopesByUserQuerySchema
 * - Service orchestration: Coordinates between domain services using SignatureOrchestrator
 * - Response formatting: Transforms domain entities to API response format
 *
 * @flow
 * 1. Validation - Validates request parameters and authentication
 * 2. Envelope Listing - Gets envelopes with pagination and filtering
 * 3. Signer Retrieval - Gets complete signer information for each envelope
 * 4. Response Assembly - Returns paginated envelopes with complete signer details
 *
 * @responsibilities
 * - Envelope Listing: Lists envelopes for authenticated users with pagination
 * - Signer Information: Always includes complete signer information for each envelope
 * - Filtering: Supports filtering by envelope status
 * - Pagination: Implements cursor-based pagination for performance
 * - Response Formatting: Transforms domain entities to API response format
 *
 * @exclusions
 * - Email Notifications: Handled by NotificationService
 * - Document Storage: Handled by Document Service
 * - Document Processing: Handled by Document Service
 * - Audit Events: Generated by individual services
 * - Permission Validation: Handled by middleware pipeline
 */
export const getEnvelopesByUserHandler = ControllerFactory.createQuery({
  // Validation schemas
  querySchema: GetEnvelopesByUserQuerySchema,
  
  // Service configuration - use new DDD architecture
  appServiceClass: class {
    private readonly signatureOrchestrator: any;
    
    constructor() {
      this.signatureOrchestrator = CompositionRoot.createSignatureOrchestrator();
    }
    
    /**
     * Executes the envelope listing orchestration
     * @param params - Extracted parameters from request
     * @returns Promise resolving to paginated envelopes with complete signer information
     */
    async execute(params: any) {
      return await this.signatureOrchestrator.listEnvelopesByUser(
        params.userId,
        {
          status: params.status,
          limit: params.limit,
          cursor: params.cursor
        }
      );
    }
  },
  
  extractParams: (_path: any, _body: any, query: any, context: any) => ({
    userId: context.auth.userId,
    status: query.status,
    limit: query.limit,
    cursor: query.cursor
  }),
  
  responseType: 'ok',
  transformResult: async (result: any) => {
    return {
        envelopes: result.envelopes.map((envelope: any) => ({
          id: envelope.getId().getValue(),
          title: envelope.getTitle(),
          description: envelope.getDescription(),
          status: envelope.getStatus().getValue(),
          signingOrderType: envelope.getSigningOrder().getType(),
          originType: envelope.getOrigin().getType(),
          createdBy: envelope.getCreatedBy(),
          expiresAt: envelope.getExpiresAt(),
          createdAt: envelope.getCreatedAt(),
          updatedAt: envelope.getUpdatedAt(),
          ...(envelope.getOrigin().getType() === 'TEMPLATE' && {
            templateId: envelope.getOrigin().getTemplateId(),
            templateVersion: envelope.getOrigin().getTemplateVersion()
          })
        })),
        signers: result.signers.map((envelopeSigners: any[]) => 
          envelopeSigners.map((signer: any) => ({
            id: signer.getId().getValue(),
            email: signer.getEmail()?.getValue(),
            fullName: signer.getFullName(),
            isExternal: signer.getIsExternal(),
            order: signer.getOrder(),
            status: signer.getStatus(),
            userId: signer.getUserId(),
            signedAt: signer.getSignedAt(),
            declinedAt: signer.getDeclinedAt(),
            declineReason: signer.getDeclineReason(),
            consentGiven: signer.getConsentGiven(),
            consentTimestamp: signer.getConsentTimestamp()
          }))
        ),
        nextCursor: result.nextCursor
      };
  },
  
  requireAuth: true,
  requiredRoles: [...VALID_COGNITO_ROLES],
  includeSecurityContext: true
});

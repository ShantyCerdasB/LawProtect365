/**
 * @fileoverview CreateSignatureRequest type - Defines the structure for creating signature records
 * @summary Type definition for signature creation requests
 * @description The CreateSignatureRequest interface defines the data structure required for
 * creating a new signature record, including all necessary metadata for legal compliance.
 */

import type { SignatureId } from '../../value-objects/SignatureId';
import type { EnvelopeId } from '../../value-objects/EnvelopeId';
import type { SignerId } from '../../value-objects/SignerId';
import type { SignatureStatus } from '@lawprotect/shared-ts';

/**
 * Request to create a new signature record
 */
export interface CreateSignatureRequest {
  /**
   * The signature unique identifier
   */
  id: SignatureId;

  /**
   * The envelope ID this signature belongs to
   */
  envelopeId: EnvelopeId;

  /**
   * The signer ID who created this signature
   */
  signerId: SignerId;

  /**
   * The document hash before signing (for integrity verification)
   */
  documentHash: string;

  /**
   * The signature hash generated by KMS
   */
  signatureHash: string;

  /**
   * The S3 key of the signed document
   */
  s3Key: string;

  /**
   * The KMS key ID used for signing
   */
  kmsKeyId: string;

  /**
   * The signing algorithm used
   */
  algorithm: string;

  /**
   * The signature timestamp
   */
  timestamp: Date;

  /**
   * The signature status
   */
  status: SignatureStatus;

  /**
   * Optional reason for signing
   */
  reason?: string;

  /**
   * Optional location where signing took place
   */
  location?: string;


  /**
   * IP address of the signer
   */
  ipAddress?: string;

  /**
   * User agent of the signer's browser
   */
  userAgent?: string;

  /**
   * Email of the actor performing the signature operation
   * Used for consent authorization checks. When provided, it must match
   * the signer's email. If omitted, downstream services may apply fallbacks.
   */
  userEmail?: string;

  /**
   * Email of the signer (redundant to userEmail for external flows, explicit for audit)
   */
  signerEmail?: string;

  /**
   * Full name of the signer (for audit readability)
   */
  signerFullName?: string;

  /**
   * The owner userId of the envelope (actor for internal single-signer flows)
   */
  ownerUserId?: string;

  /**
   * Country (ISO code or name) of the actor at the time of signing
   */
  country?: string;
}

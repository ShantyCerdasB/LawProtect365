/**
 * @fileoverview Signature DynamoDB types - Types for signature DynamoDB operations
 * @summary Types for signature pattern implementation with DynamoDB
 * @description Defines DynamoDB item structures and key builders for signature pattern,
 * including single-table design with GSI for envelope and signer-based queries.
 */

import type { BaseCursorPayload } from '../common/dynamodb-query';
import type { DdbItemWithAudit } from '../common/dynamodb-base';
import { DynamoDbPrefixes } from '../../../enums/DynamoDbPrefixes';

/**
 * Signature DynamoDB item structure
 * Implements single-table pattern with GSI for envelope and signer-based queries
 */
export interface SignatureDdbItem extends DdbItemWithAudit {
  // Primary key
  pk: string;                    // "SIGNATURE#<signatureId>"
  sk: string;                    // "META#<signatureId>"
  
  // Item metadata
  type: string;                  // "Signature"
  
  // Signature data
  signatureId: string;           // Unique signature ID
  envelopeId: string;            // Envelope ID
  signerId: string;              // Signer ID
  
  // Cryptographic data
  documentHash: string;          // Document hash before signing
  signatureHash: string;         // Signature hash generated by KMS
  s3Key: string;                 // S3 key of signed document
  kmsKeyId: string;              // KMS key ID used
  algorithm: string;             // Signing algorithm
  
  // Timestamps
  timestamp: string;             // ISO timestamp when signed
  status: string;                // Signature status
  
  // Optional metadata
  reason?: string;               // Signing reason
  location?: string;             // Signing location
  ipAddress?: string;            // IP address
  userAgent?: string;            // User agent
  
  // GSI1: Envelope-based queries
  gsi1pk: string;               // "ENVELOPE#<envelopeId>"
  gsi1sk: string;               // "SIGNATURE#<signatureId>"
  
  // GSI2: Signer-based queries
  gsi2pk: string;               // "SIGNER#<signerId>"
  gsi2sk: string;               // "SIGNATURE#<signatureId>"
  
  // GSI3: Status-based queries
  gsi3pk: string;               // "STATUS#<status>"
  gsi3sk: string;               // "SIGNATURE#<signatureId>"
}

/**
 * Signature list cursor payload for pagination
 * Extends base cursor with signature-specific fields
 */
export interface SignatureListCursorPayload extends BaseCursorPayload {
  signatureId: string;
  timestamp: string;
}

/**
 * Signature list result interface
 */
export interface SignatureListResult {
  items: SignatureDdbItem[];
  nextCursor?: string;
  hasMore: boolean;
}

/**
 * Key builders for signature DynamoDB operations
 * Provides methods to build various DynamoDB keys for signature queries
 */
export class SignatureKeyBuilders {
  /**
   * Builds primary key for signature
   * @param signatureId - The signature ID
   * @returns Primary key object
   */
  static buildPrimaryKey(signatureId: string): { pk: string; sk: string } {
    return {
      pk: `${DynamoDbPrefixes.SIGNATURE}${signatureId}`,
      sk: `META#${signatureId}`
    };
  }

  /**
   * Builds GSI1 key for envelope-based queries
   * @param envelopeId - The envelope ID
   * @param signatureId - The signature ID
   * @returns GSI1 key object
   */
  static buildGsi1Key(envelopeId: string, signatureId: string): { gsi1pk: string; gsi1sk: string } {
    return {
      gsi1pk: `${DynamoDbPrefixes.ENVELOPE}${envelopeId}`,
      gsi1sk: `${DynamoDbPrefixes.SIGNATURE}${signatureId}`
    };
  }

  /**
   * Builds GSI2 key for signer-based queries
   * @param signerId - The signer ID
   * @param signatureId - The signature ID
   * @returns GSI2 key object
   */
  static buildGsi2Key(signerId: string, signatureId: string): { gsi2pk: string; gsi2sk: string } {
    return {
      gsi2pk: `${DynamoDbPrefixes.SIGNER}${signerId}`,
      gsi2sk: `${DynamoDbPrefixes.SIGNATURE}${signatureId}`
    };
  }

  /**
   * Builds GSI3 key for status-based queries
   * @param status - The signature status
   * @param signatureId - The signature ID
   * @returns GSI3 key object
   */
  static buildGsi3Key(status: string, signatureId: string): { gsi3pk: string; gsi3sk: string } {
    return {
      gsi3pk: `STATUS#${status}`,
      gsi3sk: `${DynamoDbPrefixes.SIGNATURE}${signatureId}`
    };
  }
}

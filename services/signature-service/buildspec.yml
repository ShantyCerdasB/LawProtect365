version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Node: $(node -v)"
          echo "[INFO] npm:  $(npm -v)"
        '

  pre_build:
    commands:
      # 1) Construir shared-ts con comandos del package.json
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Construyendo shared-ts con comandos nativos"
          cd "$CODEBUILD_SRC_DIR/packages/shared-ts"
          npm ci
          DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}" \
          npm run prisma:generate
          npm run build
          echo "[INFO] shared-ts construido con Prisma generado"
        '

      # 2) Instalar deps del servicio
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] deps en signature-service"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm ci
        '

      # 3) Generar Prisma en signature-service para acceso a tipos
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Generando Prisma en signature-service para tipos"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"

          # Copiar schema de Prisma desde shared-ts
          if [ -d "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma" ]; then
            echo "[INFO] Copiando schema de Prisma desde shared-ts"
            mkdir -p prisma
            cp -r "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma/"* prisma/
          fi

          # Generar Prisma client en signature-service
          echo "[INFO] Generando Prisma client en signature-service"
          DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}" \
          npx -y prisma@5.22.0 generate

          # Verificar que Prisma funciona
          node -e "console.log(require.resolve(\"@prisma/client\") ? \"@prisma/client OK\" : \"@prisma/client NO\")"
          node -e "console.log(require.resolve(\"@lawprotect/shared-ts\") ? \"shared-ts OK\" : \"shared-ts NO\")"
          
          echo "[INFO] Configuraci√≥n completada"
        '

  build:
    commands:
      # 4) Tests con shared-ts local (Prisma ya generado)
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] tests unitarios con shared-ts local"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
          npm run test:unit:coverage
        '

      # 5) Compilar TS y limpiar dev deps del servicio
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] build TypeScript"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm run build
          npm prune --omit=dev
          rm -rf node_modules/@lawprotect/shared-ts || true
        '

      # 6) Empaquetar handlers (ajusta la lista si hace falta)
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] empaquetado de handlers"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          handlers=(create-envelope get-envelope send-envelope sign-document decline-signer share-document send-notification get-audit-trail get-envelopes-by-user update-envelope cancel-envelope download-document)
          for h in "${handlers[@]}"; do
            echo "Packaging sign-$h.zip"
            mkdir -p "temp-$h"
            cp -a "dist/handlers/$h/." "temp-$h/"
            cp package.json "temp-$h/"
            (cd "temp-$h" && zip -r "../sign-$h.zip" .)
            rm -rf "temp-$h"
          done
        '

artifacts:
  files:
    - 'services/signature-service/sign-*.zip'
  discard-paths: yes

version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Node: $(node -v)"
          echo "[INFO] npm:  $(npm -v)"
        '

  pre_build:
    commands:
      # 1) Descargar y configurar el layer existente
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Descargando layer existente de S3"
          mkdir -p /tmp/layer
          aws s3 cp "s3://$CODE_BUCKET/shared-ts-layer.zip" /tmp/layer/shared-ts-layer.zip
          cd /tmp/layer && unzip shared-ts-layer.zip
          echo "[INFO] Layer descomprimido en /tmp/layer/nodejs"
        '

      # 2) Instalar deps del servicio
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] deps en signature-service"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm ci
        '

      # 3) Configurar NODE_PATH para usar el layer existente
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] configurar NODE_PATH para usar layer existente"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"

          # Verificar estructura del layer
          echo "[INFO] Verificando estructura del layer:"
          ls -la /tmp/layer/nodejs/ || echo "Layer nodejs no encontrado"
          ls -la /tmp/layer/nodejs/node_modules/@lawprotect/ || echo "Paquete @lawprotect no encontrado en layer"

          # Configurar NODE_PATH correctamente para el layer
          export NODE_PATH="/tmp/layer/nodejs:$CODEBUILD_SRC_DIR/node_modules:$(npm root)"
          node -e "require(\"module\").Module._initPaths()"

          # Crear symlink para que TypeScript pueda resolver el mÃ³dulo
          echo "[INFO] Creando symlink para TypeScript"
          rm -rf node_modules/@lawprotect/shared-ts || true
          mkdir -p node_modules/@lawprotect
          ln -sf /tmp/layer/nodejs node_modules/@lawprotect/shared-ts

          # Verificar que el layer funciona correctamente
          node -e "console.log(require.resolve(\"@prisma/client\") ? \"@prisma/client OK\" : \"@prisma/client NO\")"
          
          # Verificar shared-ts
          if node -e "require.resolve(\"@lawprotect/shared-ts\")" 2>/dev/null; then
            echo "shared-ts OK"
          else
            echo "shared-ts NO - Verificando estructura del layer"
            echo "[INFO] Contenido del layer:"
            ls -la /tmp/layer/nodejs/ || echo "Layer nodejs no encontrado"
            echo "[INFO] Package.json del layer:"
            cat /tmp/layer/nodejs/package.json || echo "Package.json no encontrado"
            echo "[INFO] Estructura dist:"
            ls -la /tmp/layer/nodejs/dist/ || echo "Dist no encontrado"
            echo "[INFO] Symlink creado:"
            ls -la node_modules/@lawprotect/shared-ts || echo "Symlink no encontrado"
          fi
          
          echo "[INFO] Layer configurado correctamente"
        '

  build:
    commands:
      # 4) Tests con el layer existente (Prisma ya generado)
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] tests unitarios con layer existente"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          export NODE_PATH="/tmp/layer/nodejs:/tmp/layer/nodejs/node_modules:$CODEBUILD_SRC_DIR/node_modules:$(npm root)"
          node -e "require(\"module\").Module._initPaths()"
          npm run test:unit:coverage
        '

      # 5) Compilar TS y limpiar dev deps del servicio
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] build TypeScript"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm run build
          npm prune --omit=dev
          rm -rf node_modules/@lawprotect/shared-ts || true
        '

      # 6) Empaquetar handlers (ajusta la lista si hace falta)
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] empaquetado de handlers"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          handlers=(create-envelope get-envelope send-envelope sign-document decline-signer share-document send-notification get-audit-trail get-envelopes-by-user update-envelope cancel-envelope download-document)
          for h in "${handlers[@]}"; do
            echo "Packaging sign-$h.zip"
            mkdir -p "temp-$h"
            cp -a "dist/handlers/$h/." "temp-$h/"
            cp package.json "temp-$h/"
            (cd "temp-$h" && zip -r "../sign-$h.zip" .)
            rm -rf "temp-$h"
          done
        '

artifacts:
  files:
    - 'services/signature-service/sign-*.zip'
  discard-paths: yes

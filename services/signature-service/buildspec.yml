version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20

  pre_build:
    commands:
      - |
        echo "[INFO] Building packages/shared-ts"
        cd "$CODEBUILD_SRC_DIR/packages/shared-ts"
        npm ci
        export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
        npm run prisma:generate
        npm run build
      - |
        echo "[INFO] Installing deps in services/signature-service"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        npm ci
      - |
        echo "[INFO] Preparing Prisma client"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        if [ -d "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma" ]; then
          mkdir -p prisma
          cp -r "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma/"* prisma/
        fi
        export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
        npx -y prisma@5.22.0 generate
        node -e "try{require.resolve(\"@prisma/client\");console.log(\"@prisma/client OK\")}catch(e){process.exit(1)}"
        node -e "try{require.resolve(\"@lawprotect/shared-ts\");console.log(\"shared-ts OK\")}catch(e){process.exit(1)}"

  build:
    commands:
      - |
        echo "[INFO] Tests"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
        npm run test:unit:coverage
      - |
        echo "[INFO] Build + prune"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        npm run build
        npm prune --omit=dev
        rm -rf node_modules/@lawprotect/shared-ts || true
      - |
        echo "[INFO] Package handlers"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        
        # Package each handler individually
        echo "[INFO] Packaging create-envelope"
        cp "dist/src/handlers/envelopes/CreateEnvelopeHandler.js" package.json "pkg-create-envelope/"
        (cd "pkg-create-envelope" && zip -qr "../sign-create-envelope.zip" .)
        rm -rf "pkg-create-envelope"
        
        echo "[INFO] Packaging get-envelope"
        cp "dist/src/handlers/envelopes/GetEnvelopeHandler.js" package.json "pkg-get-envelope/"
        (cd "pkg-get-envelope" && zip -qr "../sign-get-envelope.zip" .)
        rm -rf "pkg-get-envelope"
        
        echo "[INFO] Packaging send-envelope"
        cp "dist/src/handlers/envelopes/SendEnvelopeHandler.js" package.json "pkg-send-envelope/"
        (cd "pkg-send-envelope" && zip -qr "../sign-send-envelope.zip" .)
        rm -rf "pkg-send-envelope"
        
        echo "[INFO] Packaging sign-document"
        cp "dist/src/handlers/signing/SignDocumentHandler.js" package.json "pkg-sign-document/"
        (cd "pkg-sign-document" && zip -qr "../sign-sign-document.zip" .)
        rm -rf "pkg-sign-document"
        
        echo "[INFO] Packaging decline-signer"
        cp "dist/src/handlers/signing/DeclineSignerHandler.js" package.json "pkg-decline-signer/"
        (cd "pkg-decline-signer" && zip -qr "../sign-decline-signer.zip" .)
        rm -rf "pkg-decline-signer"
        
        echo "[INFO] Packaging share-document"
        cp "dist/src/handlers/signing/ShareDocumentViewHandler.js" package.json "pkg-share-document/"
        (cd "pkg-share-document" && zip -qr "../sign-share-document.zip" .)
        rm -rf "pkg-share-document"
        
        echo "[INFO] Packaging send-notification"
        cp "dist/src/handlers/notifications/SendNotificationHandler.js" package.json "pkg-send-notification/"
        (cd "pkg-send-notification" && zip -qr "../sign-send-notification.zip" .)
        rm -rf "pkg-send-notification"
        
        echo "[INFO] Packaging get-audit-trail"
        cp "dist/src/handlers/audit/GetAuditTrailHandler.js" package.json "pkg-get-audit-trail/"
        (cd "pkg-get-audit-trail" && zip -qr "../sign-get-audit-trail.zip" .)
        rm -rf "pkg-get-audit-trail"
        
        echo "[INFO] Packaging get-envelopes-by-user"
        cp "dist/src/handlers/envelopes/GetEnvelopesByUserHandler.js" package.json "pkg-get-envelopes-by-user/"
        (cd "pkg-get-envelopes-by-user" && zip -qr "../sign-get-envelopes-by-user.zip" .)
        rm -rf "pkg-get-envelopes-by-user"
        
        echo "[INFO] Packaging update-envelope"
        cp "dist/src/handlers/envelopes/UpdateEnvelopeHandler.js" package.json "pkg-update-envelope/"
        (cd "pkg-update-envelope" && zip -qr "../sign-update-envelope.zip" .)
        rm -rf "pkg-update-envelope"
        
        echo "[INFO] Packaging cancel-envelope"
        cp "dist/src/handlers/envelopes/CancelEnvelopeHandler.js" package.json "pkg-cancel-envelope/"
        (cd "pkg-cancel-envelope" && zip -qr "../sign-cancel-envelope.zip" .)
        rm -rf "pkg-cancel-envelope"
        
        echo "[INFO] Packaging download-document"
        cp "dist/src/handlers/envelopes/DownloadDocumentHandler.js" package.json "pkg-download-document/"
        (cd "pkg-download-document" && zip -qr "../sign-download-document.zip" .)
        rm -rf "pkg-download-document"
      - |
        echo "[INFO] Deploy all Lambda functions"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"

        # Deploy each function individually
        echo "[INFO] Deploying create-envelope"
        aws s3 cp "sign-create-envelope.zip" "s3://$CODE_BUCKET/sign-create-envelope.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-create-envelope-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-create-envelope.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-create-envelope-stg"
        
        echo "[INFO] Deploying get-envelope"
        aws s3 cp "sign-get-envelope.zip" "s3://$CODE_BUCKET/sign-get-envelope.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-get-envelope-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-get-envelope.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-get-envelope-stg"
        
        echo "[INFO] Deploying send-envelope"
        aws s3 cp "sign-send-envelope.zip" "s3://$CODE_BUCKET/sign-send-envelope.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-send-envelope-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-send-envelope.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-send-envelope-stg"
        
        echo "[INFO] Deploying sign-document"
        aws s3 cp "sign-sign-document.zip" "s3://$CODE_BUCKET/sign-sign-document.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-sign-document-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-sign-document.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-sign-document-stg"
        
        echo "[INFO] Deploying decline-signer"
        aws s3 cp "sign-decline-signer.zip" "s3://$CODE_BUCKET/sign-decline-signer.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-decline-signer-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-decline-signer.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-decline-signer-stg"
        
        echo "[INFO] Deploying share-document"
        aws s3 cp "sign-share-document.zip" "s3://$CODE_BUCKET/sign-share-document.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-share-document-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-share-document.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-share-document-stg"
        
        echo "[INFO] Deploying send-notification"
        aws s3 cp "sign-send-notification.zip" "s3://$CODE_BUCKET/sign-send-notification.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-send-notification-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-send-notification.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-send-notification-stg"
        
        echo "[INFO] Deploying get-audit-trail"
        aws s3 cp "sign-get-audit-trail.zip" "s3://$CODE_BUCKET/sign-get-audit-trail.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-get-audit-trail-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-get-audit-trail.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-get-audit-trail-stg"
        
        echo "[INFO] Deploying get-envelopes-by-user"
        aws s3 cp "sign-get-envelopes-by-user.zip" "s3://$CODE_BUCKET/sign-get-envelopes-by-user.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-get-envelopes-by-user-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-get-envelopes-by-user.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-get-envelopes-by-user-stg"
        
        echo "[INFO] Deploying update-envelope"
        aws s3 cp "sign-update-envelope.zip" "s3://$CODE_BUCKET/sign-update-envelope.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-update-envelope-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-update-envelope.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-update-envelope-stg"
        
        echo "[INFO] Deploying cancel-envelope"
        aws s3 cp "sign-cancel-envelope.zip" "s3://$CODE_BUCKET/sign-cancel-envelope.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-cancel-envelope-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-cancel-envelope.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-cancel-envelope-stg"
        
        echo "[INFO] Deploying download-document"
        aws s3 cp "sign-download-document.zip" "s3://$CODE_BUCKET/sign-download-document.zip"
        aws lambda update-function-code --function-name "lawprotect365-sign-service-download-document-stg" --s3-bucket "$CODE_BUCKET" --s3-key "sign-download-document.zip"
        aws lambda wait function-updated --function-name "lawprotect365-sign-service-download-document-stg"
        
        # Create a default appspec.yml for the main function
        echo "version: 0.0" > "appspec.yml"
        echo "Resources:" >> "appspec.yml"
        echo "  - CreateEnvelope:" >> "appspec.yml"
        echo "      Type: AWS::Lambda::Function" >> "appspec.yml"
        echo "      Properties:" >> "appspec.yml"
        echo "        Name: \"lawprotect365-sign-service-create-envelope-stg\"" >> "appspec.yml"
        echo "        Alias: \"live\"" >> "appspec.yml"
        echo "        CurrentVersion: 1" >> "appspec.yml"
        echo "        TargetVersion: 1" >> "appspec.yml"
        '

artifacts:
  files:
    - services/signature-service/sign-*.zip
    - services/signature-service/appspec.yml
    - services/signature-service/appspec-*.yml
  discard-paths: yes
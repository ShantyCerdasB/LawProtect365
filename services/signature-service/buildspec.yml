version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Node: $(node -v)"
          echo "[INFO] npm:  $(npm -v)"
        '

  pre_build:
    commands:
      # 1) Construir shared-ts y generar Prisma **5.22.x**
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] build shared-ts"
          cd "$CODEBUILD_SRC_DIR/packages/shared-ts"

          # Instalar dependencias del paquete
          npm ci

          # Detectar versión instalada de @prisma/client
          INSTALLED_VER="$(node -e "console.log(require(\"@prisma/client/package.json\").version)")"
          echo "[INFO] @prisma/client instalado: ${INSTALLED_VER}"

          # Si no es 5.22.x, instalamos 5.22.0 explícitamente (cliente + CLI)
          if [ "${INSTALLED_VER%%.*}" -ne 5 ] || [ "${INSTALLED_VER#5.}" != "${INSTALLED_VER}" ] && [ "${INSTALLED_VER#5.}" != "${INSTALLED_VER}" ]; then
            true # no-op; shell guard
          fi
          if [ "${INSTALLED_VER%%.*}" != "5" ] || [ "${INSTALLED_VER#5.}" = "${INSTALLED_VER}" ] || [ "${INSTALLED_VER%%.*}.${INSTALLED_VER#*.%%.*}" != "5.22" ]; then
            echo "[INFO] Forzando @prisma/client@5.22.0 y prisma@5.22.0"
            npm i @prisma/client@5.22.0 --no-save
            npm i -D prisma@5.22.0 --no-save
          fi

          # Generar client exactamente con 5.22.0
          echo "[INFO] prisma generate con CLI 5.22.0"
          DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}" \
          npx -y prisma@5.22.0 generate

          # Build del paquete
          npm run build
          npm prune --omit=dev

          # Armar layer temporal
          mkdir -p /tmp/layer/nodejs
          cp -a dist /tmp/layer/nodejs/
          cp package.json /tmp/layer/nodejs/

          # (opcional) copiar node_modules raíz al layer
          if [ -d "$CODEBUILD_SRC_DIR/node_modules" ]; then
            mkdir -p /tmp/layer/nodejs/node_modules
            cp -a "$CODEBUILD_SRC_DIR/node_modules/." /tmp/layer/nodejs/node_modules/
          fi

          echo "[INFO] Prisma Client generado en shared-ts con 5.22.0"
        '

      # 2) Instalar deps del servicio
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] deps en signature-service"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm ci
        '

      # 3) Configurar NODE_PATH para que Jest/Node resuelvan el layer
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] configurar NODE_PATH para tests"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"

          export NODE_PATH="/tmp/layer/nodejs:/tmp/layer/nodejs/node_modules:$CODEBUILD_SRC_DIR/node_modules:$(npm root)"
          node -e "require(\"module\").Module._initPaths()"

          # Forzar que no tome el paquete local (usará el del layer)
          rm -rf node_modules/@lawprotect/shared-ts || true

          node -e "console.log(require.resolve(\"@prisma/client\") ? \"@prisma/client OK\" : \"@prisma/client NO\")"
          node -e "console.log(require.resolve(\"@lawprotect/shared-ts\") ? \"shared-ts OK\" : \"shared-ts NO\")"
        '

  build:
    commands:
      # 4) Tests con el layer y Prisma 5.22.x
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] tests unitarios"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          export NODE_PATH="/tmp/layer/nodejs:/tmp/layer/nodejs/node_modules:$CODEBUILD_SRC_DIR/node_modules:$(npm root)"
          node -e "require(\"module\").Module._initPaths()"
          npm run test:unit:coverage
        '

      # 5) Compilar TS y limpiar dev deps del servicio
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] build TypeScript"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm run build
          npm prune --omit=dev
          rm -rf node_modules/@lawprotect/shared-ts || true
        '

      # 6) Empaquetar handlers (ajusta la lista si hace falta)
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] empaquetado de handlers"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          handlers=(create-envelope get-envelope send-envelope sign-document decline-signer share-document send-notification get-audit-trail get-envelopes-by-user update-envelope cancel-envelope download-document)
          for h in "${handlers[@]}"; do
            echo "Packaging sign-$h.zip"
            mkdir -p "temp-$h"
            cp -a "dist/handlers/$h/." "temp-$h/"
            cp package.json "temp-$h/"
            (cd "temp-$h" && zip -r "../sign-$h.zip" .)
            rm -rf "temp-$h"
          done
        '

artifacts:
  files:
    - 'services/signature-service/sign-*.zip'
  discard-paths: yes

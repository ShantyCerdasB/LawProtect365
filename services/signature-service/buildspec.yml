version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Node: $(node -v)"
          echo "[INFO] npm:  $(npm -v)"
        '

  pre_build:
    commands:
      # 1) Construir shared-ts con comandos del package.json
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Construyendo shared-ts con comandos nativos"
          cd "$CODEBUILD_SRC_DIR/packages/shared-ts"
          npm ci
          DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}" \
          npm run prisma:generate
          npm run build
          echo "[INFO] shared-ts construido con Prisma generado"
        '

      # 2) Instalar deps del servicio
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] deps en signature-service"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm ci
        '

      # 3) Generar Prisma en signature-service para acceso a tipos
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Generando Prisma en signature-service para tipos"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"

          # Copiar schema de Prisma desde shared-ts
          if [ -d "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma" ]; then
            echo "[INFO] Copiando schema de Prisma desde shared-ts"
            mkdir -p prisma
            cp -r "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma/"* prisma/
          fi

          # Generar Prisma client en signature-service
          echo "[INFO] Generando Prisma client en signature-service"
          DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}" \
          npx -y prisma@5.22.0 generate

          # Verificar que Prisma funciona
          node -e "console.log(require.resolve(\"@prisma/client\") ? \"@prisma/client OK\" : \"@prisma/client NO\")"
          node -e "console.log(require.resolve(\"@lawprotect/shared-ts\") ? \"shared-ts OK\" : \"shared-ts NO\")"
          
          echo "[INFO] Configuración completada"
        '

  build:
    commands:
      # 4) Tests con shared-ts local (Prisma ya generado)
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] tests unitarios con shared-ts local"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
          npm run test:unit:coverage
        '

      # 5) Compilar TS y limpiar dev deps del servicio
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] build TypeScript"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm run build
          npm prune --omit=dev
          rm -rf node_modules/@lawprotect/shared-ts || true
        '

            # 6) Empaquetar handlers (estructura real: dist/handlers/categoria/Handler.js)
            - |
              bash -lc '
                set -euo pipefail
                echo "[INFO] empaquetado de handlers"
                cd "$CODEBUILD_SRC_DIR/services/signature-service"
                
                # Mapeo de handlers a su ubicación real
                declare -A handler_map=(
                  ["create-envelope"]="dist/handlers/envelopes/CreateEnvelopeHandler.js"
                  ["get-envelope"]="dist/handlers/envelopes/GetEnvelopeHandler.js"
                  ["send-envelope"]="dist/handlers/envelopes/SendEnvelopeHandler.js"
                  ["sign-document"]="dist/handlers/signing/SignDocumentHandler.js"
                  ["decline-signer"]="dist/handlers/signing/DeclineSignerHandler.js"
                  ["share-document"]="dist/handlers/signing/ShareDocumentViewHandler.js"
                  ["send-notification"]="dist/handlers/notifications/SendNotificationHandler.js"
                  ["get-audit-trail"]="dist/handlers/audit/GetAuditTrailHandler.js"
                  ["get-envelopes-by-user"]="dist/handlers/envelopes/GetEnvelopesByUserHandler.js"
                  ["update-envelope"]="dist/handlers/envelopes/UpdateEnvelopeHandler.js"
                  ["cancel-envelope"]="dist/handlers/envelopes/CancelEnvelopeHandler.js"
                  ["download-document"]="dist/handlers/envelopes/DownloadDocumentHandler.js"
                )
                
                for handler_name in "${!handler_map[@]}"; do
                  handler_path="${handler_map[$handler_name]}"
                  echo "Packaging sign-$handler_name.zip from $handler_path"
                  
                  if [ -f "$handler_path" ]; then
                    mkdir -p "temp-$handler_name"
                    cp "$handler_path" "temp-$handler_name/"
                    cp package.json "temp-$handler_name/"
                    (cd "temp-$handler_name" && zip -r "../sign-$handler_name.zip" .)
                    rm -rf "temp-$handler_name"
                    echo "✅ sign-$handler_name.zip created"
                  else
                    echo "❌ Handler not found: $handler_path"
                    exit 1
                  fi
                done
              '

artifacts:
  files:
    - 'services/signature-service/sign-*.zip'
  discard-paths: yes

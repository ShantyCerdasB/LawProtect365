version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20

  pre_build:
    commands:
      - |
        set -eu
        echo "[INFO] ===== Pre-build ====="
      - |
        echo "[INFO] Installing workspace dependencies (npm workspaces)"
        cd "$CODEBUILD_SRC_DIR"
        npm ci --workspaces --include-workspace-root --no-audit --no-fund
      - |
        echo "[INFO] Building packages/shared-ts"
        cd "$CODEBUILD_SRC_DIR/packages/shared-ts"
        export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
        npm run prisma:generate
        npm run build
      - |
        echo "[INFO] Using workspace install; skipping per-service npm ci"
      - |
        echo "[INFO] Preparing Prisma client"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        if [ -d "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma" ]; then
          mkdir -p prisma
          cp -r "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma/"* prisma/
        fi
        export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
        npx -y prisma@5.22.0 generate
        node -e "try{require.resolve('@prisma/client');console.log('[OK] @prisma/client')}catch(e){console.error(e);process.exit(1)}"
        node -e "try{require.resolve('@lawprotect/shared-ts');console.log('[OK] @lawprotect/shared-ts')}catch(e){console.error(e);process.exit(1)}"

  build:
    commands:
      - |
        set -eu
        echo "[INFO] ===== Build & Package ====="
      - |
        echo "[INFO] Running unit tests"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
        npm run test:unit:coverage
      - |
        echo "[INFO] Building service (ESM)"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        npm run build

      # ===== Deps layer skipped (using bundled core) =====
      - |
        echo "[INFO] Skipping dependencies layer; core layer will include runtime deps via bundling"

      # ===== Core layer (ESM) =====
      - |
        echo "[INFO] Building core layer (ESM)"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        rm -rf layer-core sign-core-layer.zip

        mkdir -p "layer-core/nodejs/node_modules/@lawprotect/sign-core"

        # Create ESM bundle entry that re-exports handlers
        cat > "core-bundle-entry.mjs" << 'EOF'
        import { createEnvelopeHandler } from './dist/src/handlers/envelopes/CreateEnvelopeHandler.js';
        import { getEnvelopeHandler } from './dist/src/handlers/envelopes/GetEnvelopeHandler.js';
        import { sendEnvelopeHandler } from './dist/src/handlers/envelopes/SendEnvelopeHandler.js';
        import { updateEnvelopeHandler } from './dist/src/handlers/envelopes/UpdateEnvelopeHandler.js';
        import { cancelEnvelopeHandler } from './dist/src/handlers/envelopes/CancelEnvelopeHandler.js';
        import { getEnvelopesByUserHandler } from './dist/src/handlers/envelopes/GetEnvelopesByUserHandler.js';
        import { downloadDocumentHandler } from './dist/src/handlers/envelopes/DownloadDocumentHandler.js';
        import { signDocumentHandler } from './dist/src/handlers/signing/SignDocumentHandler.js';
        import { declineSignerHandler } from './dist/src/handlers/signing/DeclineSignerHandler.js';
        import { shareDocumentViewHandler } from './dist/src/handlers/signing/ShareDocumentViewHandler.js';
        import { sendNotificationHandler } from './dist/src/handlers/notifications/SendNotificationHandler.js';
        import { getAuditTrailHandler } from './dist/src/handlers/audit/GetAuditTrailHandler.js';
        export const handlers = {
          createEnvelope: createEnvelopeHandler,
          getEnvelope: getEnvelopeHandler,
          sendEnvelope: sendEnvelopeHandler,
          updateEnvelope: updateEnvelopeHandler,
          cancelEnvelope: cancelEnvelopeHandler,
          getEnvelopesByUser: getEnvelopesByUserHandler,
          downloadDocument: downloadDocumentHandler,
          signDocument: signDocumentHandler,
          declineSigner: declineSignerHandler,
          shareDocument: shareDocumentViewHandler,
          sendNotification: sendNotificationHandler,
          getAuditTrail: getAuditTrailHandler
        };
        EOF

        # Bundle with esbuild (Node 20 ESM), include all runtime deps in one file
        npx -y esbuild@0.21.5 core-bundle-entry.mjs \
          --bundle --platform=node --format=esm --target=node20 \
          --minify --sourcemap=linked \
          --outfile="layer-core/nodejs/node_modules/@lawprotect/sign-core/index.js"

        # package.json del módulo ESM
        cat > "layer-core/nodejs/node_modules/@lawprotect/sign-core/package.json" << 'EOF'
        {
          "name": "@lawprotect/sign-core",
          "version": "1.0.0",
          "main": "index.js",
          "type": "module"
        }
        EOF


        (cd layer-core && zip -qr ../sign-core-layer.zip .)
        test -s sign-core-layer.zip || { echo "[ERROR] sign-core-layer.zip is empty"; exit 1; }
        # Validate bundled index exists
        unzip -l sign-core-layer.zip | grep -q 'nodejs/node_modules/@lawprotect/sign-core/index\.js' \
          || { echo "[ERROR] index.js bundle missing from core layer"; exit 1; }
        rm -rf layer-core
        echo "[INFO] Core layer ZIP created"

      # ===== Zips de funciones (ESM) =====
      - |
        echo "[INFO] Creating minimal ESM function ZIPs"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"

        make_zip() {
          local zip="$1"
          local exp="$2"
          rm -rf __tmp_fn
          mkdir -p __tmp_fn
          cat > __tmp_fn/index.mjs << EOF
        import { webcrypto } from 'node:crypto';
        if (!globalThis.crypto) { globalThis.crypto = webcrypto; }
        const { handlers } = await import('@lawprotect/sign-core');
        export const handler = handlers.${exp};
        EOF
          cat > __tmp_fn/package.json << 'EOF'
        { "type": "module" }
        EOF
          (cd __tmp_fn && zip -qr "../$zip" .)
          rm -rf __tmp_fn
        }

        make_zip "sign-create-envelope.zip"        "createEnvelope"
        make_zip "sign-get-envelope.zip"           "getEnvelope"
        make_zip "sign-send-envelope.zip"          "sendEnvelope"
        make_zip "sign-sign-document.zip"          "signDocument"
        make_zip "sign-decline-signer.zip"         "declineSigner"
        make_zip "sign-share-document.zip"         "shareDocument"
        make_zip "sign-send-notification.zip"      "sendNotification"
        make_zip "sign-get-audit-trail.zip"        "getAuditTrail"
        make_zip "sign-get-envelopes-by-user.zip"  "getEnvelopesByUser"
        make_zip "sign-update-envelope.zip"        "updateEnvelope"
        make_zip "sign-cancel-envelope.zip"        "cancelEnvelope"
        make_zip "sign-download-document.zip"      "downloadDocument"

      # ===== Publicar layers (con fallback a última versión) =====
      - |
        echo "[INFO] Uploading layers to S3 & publishing versions"
        set -e
        cd "$CODEBUILD_SRC_DIR/services/signature-service"

        if [ -z "${CODE_BUCKET:-}" ]; then
          echo "[ERROR] CODE_BUCKET not set"
          exit 1
        fi

        AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID:-$(aws sts get-caller-identity --query Account --output text)}"

        aws s3 cp "sign-core-layer.zip" "s3://$CODE_BUCKET/sign-core-layer.zip"

        publish_layer() {
          NAME="$1"
          ZIP="$2"
          DESC="$3"
          # Enforce 50MB compressed limit for Lambda layers
          ZIP_SIZE=$( (stat -c%s "$ZIP" 2>/dev/null) || (wc -c < "$ZIP") )
          MAX_SIZE=$((50*1024*1024))
          if [ "$ZIP_SIZE" -gt "$MAX_SIZE" ]; then
            echo "[ERROR] $ZIP exceeds 50MB compressed limit ($ZIP_SIZE bytes)" >&2
            exit 1
          fi
          ARN=$(aws lambda publish-layer-version \
            --layer-name "$NAME" \
            --description "$DESC" \
            --content S3Bucket="$CODE_BUCKET",S3Key="$ZIP" \
            --compatible-runtimes nodejs20.x \
            --query LayerVersionArn --output text)
          if [ -z "$ARN" ] || [ "$ARN" = "None" ]; then
            echo "[ERROR] Failed to publish layer $NAME" >&2
            exit 1
          fi
          echo "$ARN"
        }

        CORE_LAYER_NAME="lawprotect365-sign-core-stg"

        CORE_LAYER_VERSION="$(publish_layer "$CORE_LAYER_NAME" "sign-core-layer.zip" "Signature service core code")"

        echo "[INFO] Core layer ARN:         ${CORE_LAYER_VERSION:-<empty>}"

        aws lambda list-layer-versions --layer-name "$CORE_LAYER_NAME" --max-items 5 || true

      # ===== Deploy de funciones =====
      - |
        echo "[INFO] Deploying Lambda functions"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"

        AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID:-$(aws sts get-caller-identity --query Account --output text)}"
        SHARED_TS_LAYER_NAME="lawprotect365-shared-ts-layer-stg"
        SHARED_TS_LAYER_ARN="$(aws lambda list-layer-versions --layer-name "$SHARED_TS_LAYER_NAME" --max-items 1 --query "LayerVersions[0].LayerVersionArn" --output text 2>/dev/null || true)"

        build_layers_args() {
          args=""
          if [ -n "${SHARED_TS_LAYER_ARN:-}" ] && [ "${SHARED_TS_LAYER_ARN}" != "None" ]; then
            args="${args} ${SHARED_TS_LAYER_ARN}"
          fi
          if [ -n "${CORE_LAYER_VERSION:-}" ] && [ "${CORE_LAYER_VERSION}" != "None" ]; then
            args="${args} ${CORE_LAYER_VERSION}"
          fi
          echo "$args" | sed -e 's/^ *//'
        }

        deploy_fn() {
          FN="$1"
          ZIP="$2"
          LAYERS_ARGS="$(build_layers_args)"
          echo "[INFO] Deploying $FN"
          aws s3 cp "$ZIP" "s3://$CODE_BUCKET/$ZIP"
          aws lambda update-function-code --function-name "$FN" --s3-bucket "$CODE_BUCKET" --s3-key "$ZIP" >/dev/null
          aws lambda wait function-updated --function-name "$FN"
          ENV_JSON="$(aws lambda get-function-configuration --function-name "$FN" --query 'Environment.Variables' --output json 2>/dev/null || echo '{}')"

          ENV_ARG="$(python3 -c "import json,sys; raw=sys.argv[1] if len(sys.argv)>1 else '{}'; env=json.loads(raw or '{}') or {}; env['NODE_OPTIONS']='--experimental-specifier-resolution=node'; print(json.dumps({'Variables': env}, separators=(',',':')))" "$ENV_JSON")"

          if [ -n "$LAYERS_ARGS" ]; then
            aws lambda update-function-configuration --function-name "$FN" --runtime nodejs20.x --handler index.handler --layers $LAYERS_ARGS --environment "$ENV_ARG" >/dev/null
          else
            aws lambda update-function-configuration --function-name "$FN" --runtime nodejs20.x --handler index.handler --environment "$ENV_ARG" >/dev/null
          fi

          aws lambda wait function-updated --function-name "$FN"
        }

        deploy_fn "lawprotect365-sign-service-create-envelope-stg"        "sign-create-envelope.zip"
        deploy_fn "lawprotect365-sign-service-get-envelope-stg"           "sign-get-envelope.zip"
        deploy_fn "lawprotect365-sign-service-send-envelope-stg"          "sign-send-envelope.zip"
        deploy_fn "lawprotect365-sign-service-sign-document-stg"          "sign-sign-document.zip"
        deploy_fn "lawprotect365-sign-service-decline-signer-stg"         "sign-decline-signer.zip"
        deploy_fn "lawprotect365-sign-service-share-document-stg"         "sign-share-document.zip"
        deploy_fn "lawprotect365-sign-service-send-notification-stg"      "sign-send-notification.zip"
        deploy_fn "lawprotect365-sign-service-get-audit-trail-stg"        "sign-get-audit-trail.zip"
        deploy_fn "lawprotect365-sign-service-get-envelopes-by-user-stg"  "sign-get-envelopes-by-user.zip"
        deploy_fn "lawprotect365-sign-service-update-envelope-stg"        "sign-update-envelope.zip"
        deploy_fn "lawprotect365-sign-service-cancel-envelope-stg"        "sign-cancel-envelope.zip"
        deploy_fn "lawprotect365-sign-service-download-document-stg"      "sign-download-document.zip"

      - |
        echo "[INFO] Writing default appspec.yml"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        cat > appspec.yml << 'EOF'
        version: 0.0
        Resources:
          - CreateEnvelope:
              Type: AWS::Lambda::Function
              Properties:
                Name: "lawprotect365-sign-service-create-envelope-stg"
                Alias: "live"
                CurrentVersion: 1
                TargetVersion: 1
        EOF

artifacts:
  files:
    - "services/signature-service/sign-*.zip"
    - "services/signature-service/sign-core-layer.zip"
    - "services/signature-service/appspec.yml"
    - "services/signature-service/appspec-*.yml"
  discard-paths: yes

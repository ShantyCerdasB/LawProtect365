version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Node: $(node -v)"
          echo "[INFO] npm:  $(npm -v)"
        '

  pre_build:
    commands:
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Construyendo shared-ts con comandos nativos"
          cd "$CODEBUILD_SRC_DIR/packages/shared-ts"
          npm ci
          DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}" \
          npm run prisma:generate
          npm run build
          echo "[INFO] shared-ts construido con Prisma generado"
        '
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] deps en signature-service"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm ci
        '
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Generando Prisma en signature-service para tipos"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          if [ -d "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma" ]; then
            echo "[INFO] Copiando schema de Prisma desde shared-ts"
            mkdir -p prisma
            cp -r "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma/"* prisma/
          fi
          echo "[INFO] Generando Prisma client en signature-service"
          DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}" \
          npx -y prisma@5.22.0 generate
          node -e "console.log(require.resolve('@prisma/client') ? '@prisma/client OK' : '@prisma/client NO')"
          node -e "console.log(require.resolve('@lawprotect/shared-ts') ? 'shared-ts OK' : 'shared-ts NO')"
          echo "[INFO] Configuración completada"
        '

  build:
    commands:
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] tests unitarios con shared-ts local"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
          npm run test:unit:coverage
        '
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] build TypeScript"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          npm run build
          npm prune --omit=dev
          rm -rf node_modules/@lawprotect/shared-ts || true
        '
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] empaquetado de handlers"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          declare -A handler_map=(
            ["create-envelope"]="dist/src/handlers/envelopes/CreateEnvelopeHandler.js"
            ["get-envelope"]="dist/src/handlers/envelopes/GetEnvelopeHandler.js"
            ["send-envelope"]="dist/src/handlers/envelopes/SendEnvelopeHandler.js"
            ["sign-document"]="dist/src/handlers/signing/SignDocumentHandler.js"
            ["decline-signer"]="dist/src/handlers/signing/DeclineSignerHandler.js"
            ["share-document"]="dist/src/handlers/signing/ShareDocumentViewHandler.js"
            ["send-notification"]="dist/src/handlers/notifications/SendNotificationHandler.js"
            ["get-audit-trail"]="dist/src/handlers/audit/GetAuditTrailHandler.js"
            ["get-envelopes-by-user"]="dist/src/handlers/envelopes/GetEnvelopesByUserHandler.js"
            ["update-envelope"]="dist/src/handlers/envelopes/UpdateEnvelopeHandler.js"
            ["cancel-envelope"]="dist/src/handlers/envelopes/CancelEnvelopeHandler.js"
            ["download-document"]="dist/src/handlers/envelopes/DownloadDocumentHandler.js"
          )
          for handler_name in "${!handler_map[@]}"; do
            handler_path="${handler_map[$handler_name]}"
            echo "Packaging sign-$handler_name.zip from $handler_path"
            if [ -f "$handler_path" ]; then
              mkdir -p "temp-$handler_name"
              cp "$handler_path" "temp-$handler_name/"
              cp package.json "temp-$handler_name/"
              (cd "temp-$handler_name" && zip -r "../sign-$handler_name.zip" .)
              rm -rf "temp-$handler_name"
              echo "✅ sign-$handler_name.zip created"
            else
              echo "❌ Handler not found: $handler_path"
              exit 1
            fi
          done
        '
      - |
        bash -lc '
          set -euo pipefail
          echo "[INFO] Creando AppSpec para CodeDeploy"
          cd "$CODEBUILD_SRC_DIR/services/signature-service"
          echo "version: 0.0" > appspec.yml
          echo "Resources:" >> appspec.yml
          echo "  - SignatureService:" >> appspec.yml
          echo "      Type: AWS::Lambda::Function" >> appspec.yml
          echo "      Properties:" >> appspec.yml
          echo "        Name: \"signature-service\"" >> appspec.yml
          echo "        Alias: \"live\"" >> appspec.yml
          echo "        CurrentVersion: 1" >> appspec.yml
          echo "        TargetVersion: 1" >> appspec.yml
          echo "[INFO] AppSpec creado: appspec.yml"
        '

artifacts:
  files:
    - 'services/signature-service/sign-*.zip'
    - 'services/signature-service/appspec.yml'
  discard-paths: yes

version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20

  pre_build:
    commands:
      - |
        set -eu
        echo "[INFO] ===== Pre-build ====="

      # 1) Build packages/shared-ts (genera Prisma y compila)
      - |
        echo "[INFO] Building packages/shared-ts"
        cd "$CODEBUILD_SRC_DIR/packages/shared-ts"
        npm ci
        export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
        npm run prisma:generate
        npm run build

      # 2) Instalar deps del servicio (con dev) para compilar y testear
      - |
        echo "[INFO] Installing deps in services/signature-service"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        npm ci

      # 3) Preparar Prisma client dentro del servicio
      - |
        echo "[INFO] Preparing Prisma client"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        if [ -d "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma" ]; then
          mkdir -p prisma
          cp -r "$CODEBUILD_SRC_DIR/packages/shared-ts/prisma/"* prisma/
        fi
        export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
        npx -y prisma@5.22.0 generate
        node -e "try{require.resolve('@prisma/client');console.log('[OK] @prisma/client')}catch(e){console.error(e);process.exit(1)}"
        node -e "try{require.resolve('@lawprotect/shared-ts');console.log('[OK] @lawprotect/shared-ts')}catch(e){console.error(e);process.exit(1)}"

  build:
    commands:
      - |
        set -eu
        echo "[INFO] ===== Build & Package ====="

      # 4) Tests
      - |
        echo "[INFO] Running unit tests"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/postgres?schema=public}"
        npm run test:unit:coverage

      # 5) Build del servicio (TS → JS)
      - |
        echo "[INFO] Building service"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        npm run build

      # 6) DEPS LAYER: construir en un folder limpio con prod deps
      - |
        echo "[INFO] Building dependencies layer (clean env)"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        rm -rf deps-build layer-deps sign-deps-layer.zip
        mkdir -p deps-build
        cp package.json package-lock.json deps-build/
        cd deps-build
        npm ci --omit=dev
        mkdir -p ../layer-deps/nodejs
        cp -r node_modules ../layer-deps/nodejs/
        cd ..
        (cd layer-deps && zip -qr ../sign-deps-layer.zip .)
        rm -rf deps-build layer-deps
        echo "[INFO] Dependencies layer ZIP created"

      # 7) CORE LAYER: empaquetar dist como paquete CJS @lawprotect/sign-core
      - |
        echo "[INFO] Building core layer"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        rm -rf layer-core sign-core-layer.zip
        mkdir -p "layer-core/nodejs/node_modules/@lawprotect/sign-core"
        cp -r "dist" "layer-core/nodejs/node_modules/@lawprotect/sign-core/"

        # package.json CJS (evita fricciones ESM en Lambda)
        cat > "layer-core/nodejs/node_modules/@lawprotect/sign-core/package.json" << 'EOF'
        {
          "name": "@lawprotect/sign-core",
          "version": "1.0.0",
          "main": "index.js",
          "type": "commonjs"
        }
        EOF

        # index.js: re-exporta handlers vía require()
        cat > "layer-core/nodejs/node_modules/@lawprotect/sign-core/index.js" << 'EOF'
        module.exports = {
          handlers: {
            createEnvelope: require('./dist/src/handlers/envelopes/CreateEnvelopeHandler').createEnvelopeHandler,
            getEnvelope: require('./dist/src/handlers/envelopes/GetEnvelopeHandler').getEnvelopeHandler,
            sendEnvelope: require('./dist/src/handlers/envelopes/SendEnvelopeHandler').sendEnvelopeHandler,
            updateEnvelope: require('./dist/src/handlers/envelopes/UpdateEnvelopeHandler').updateEnvelopeHandler,
            cancelEnvelope: require('./dist/src/handlers/envelopes/CancelEnvelopeHandler').cancelEnvelopeHandler,
            getEnvelopesByUser: require('./dist/src/handlers/envelopes/GetEnvelopesByUserHandler').getEnvelopesByUserHandler,
            downloadDocument: require('./dist/src/handlers/envelopes/DownloadDocumentHandler').downloadDocumentHandler,
            signDocument: require('./dist/src/handlers/signing/SignDocumentHandler').signDocumentHandler,
            declineSigner: require('./dist/src/handlers/signing/DeclineSignerHandler').declineSignerHandler,
            shareDocument: require('./dist/src/handlers/signing/ShareDocumentViewHandler').shareDocumentViewHandler,
            sendNotification: require('./dist/src/handlers/notifications/SendNotificationHandler').sendNotificationHandler,
            getAuditTrail: require('./dist/src/handlers/audit/GetAuditTrailHandler').getAuditTrailHandler
          }
        };
        EOF

        (cd layer-core && zip -qr ../sign-core-layer.zip .)
        rm -rf layer-core
        echo "[INFO] Core layer ZIP created"

      # 8) ZIPs mínimos por Lambda (CommonJS)
      - |
        echo "[INFO] Creating minimal function ZIPs"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        make_zip () { echo "exports.handler = require('@lawprotect/sign-core').handlers.$2;" > index.js; zip -q "$1" index.js; rm index.js; }
        make_zip "sign-create-envelope.zip"       "createEnvelope"
        make_zip "sign-get-envelope.zip"          "getEnvelope"
        make_zip "sign-send-envelope.zip"         "sendEnvelope"
        make_zip "sign-sign-document.zip"         "signDocument"
        make_zip "sign-decline-signer.zip"        "declineSigner"
        make_zip "sign-share-document.zip"        "shareDocument"
        make_zip "sign-send-notification.zip"     "sendNotification"
        make_zip "sign-get-audit-trail.zip"       "getAuditTrail"
        make_zip "sign-get-envelopes-by-user.zip" "getEnvelopesByUser"
        make_zip "sign-update-envelope.zip"       "updateEnvelope"
        make_zip "sign-cancel-envelope.zip"       "cancelEnvelope"
        make_zip "sign-download-document.zip"     "downloadDocument"

      # 9) Subir y publicar layers
      - |
        echo "[INFO] Uploading layers to S3 & publishing versions"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"

        # Validaciones / helpers
        if [ -z "${CODE_BUCKET:-}" ]; then
          echo "[ERROR] CODE_BUCKET no está definido en las variables de entorno de CodeBuild"
          exit 1
        fi
        AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID:-$(aws sts get-caller-identity --query Account --output text)}"

        aws s3 cp "sign-deps-layer.zip" "s3://$CODE_BUCKET/sign-deps-layer.zip"
        aws s3 cp "sign-core-layer.zip" "s3://$CODE_BUCKET/sign-core-layer.zip"

        DEPS_LAYER_VERSION=$(aws lambda publish-layer-version \
          --layer-name "lawprotect365-sign-deps-stg" \
          --description "Signature service dependencies" \
          --zip-file fileb://sign-deps-layer.zip \
          --compatible-runtimes nodejs20.x \
          --query LayerVersionArn --output text)

        CORE_LAYER_VERSION=$(aws lambda publish-layer-version \
          --layer-name "lawprotect365-sign-core-stg" \
          --description "Signature service core code" \
          --zip-file fileb://sign-core-layer.zip \
          --compatible-runtimes nodejs20.x \
          --query LayerVersionArn --output text)

        echo "[INFO] Dependencies layer: $DEPS_LAYER_VERSION"
        echo "[INFO] Core layer:          $CORE_LAYER_VERSION"

        echo "[INFO] Listing latest layer versions (sanity)"
        aws lambda list-layer-versions --layer-name "lawprotect365-sign-core-stg" --max-items 5 || true
        aws lambda list-layer-versions --layer-name "lawprotect365-sign-deps-stg" --max-items 5 || true

      # 10) Deploy de todas las Lambdas con 3 layers: shared + deps + core
      - |
        echo "[INFO] Deploying Lambda functions"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"

        AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID:-$(aws sts get-caller-identity --query Account --output text)}"
        SHARED_TS_LAYER_ARN="arn:aws:lambda:us-east-1:${AWS_ACCOUNT_ID}:layer:lawprotect365-shared-ts-layer-stg:1"

        deploy_fn () {
          FN="$1"; ZIP="$2"
          echo "[INFO] Deploying $FN"
          aws s3 cp "$ZIP" "s3://$CODE_BUCKET/$ZIP"
          aws lambda update-function-code --function-name "$FN" --s3-bucket "$CODE_BUCKET" --s3-key "$ZIP" >/dev/null
          aws lambda update-function-configuration --function-name "$FN" --layers "$SHARED_TS_LAYER_ARN" "$DEPS_LAYER_VERSION" "$CORE_LAYER_VERSION" >/dev/null
          aws lambda wait function-updated --function-name "$FN"
        }

        deploy_fn "lawprotect365-sign-service-create-envelope-stg"        "sign-create-envelope.zip"
        deploy_fn "lawprotect365-sign-service-get-envelope-stg"           "sign-get-envelope.zip"
        deploy_fn "lawprotect365-sign-service-send-envelope-stg"          "sign-send-envelope.zip"
        deploy_fn "lawprotect365-sign-service-sign-document-stg"          "sign-sign-document.zip"
        deploy_fn "lawprotect365-sign-service-decline-signer-stg"         "sign-decline-signer.zip"
        deploy_fn "lawprotect365-sign-service-share-document-stg"         "sign-share-document.zip"
        deploy_fn "lawprotect365-sign-service-send-notification-stg"      "sign-send-notification.zip"
        deploy_fn "lawprotect365-sign-service-get-audit-trail-stg"        "sign-get-audit-trail.zip"
        deploy_fn "lawprotect365-sign-service-get-envelopes-by-user-stg"  "sign-get-envelopes-by-user.zip"
        deploy_fn "lawprotect365-sign-service-update-envelope-stg"        "sign-update-envelope.zip"
        deploy_fn "lawprotect365-sign-service-cancel-envelope-stg"        "sign-cancel-envelope.zip"
        deploy_fn "lawprotect365-sign-service-download-document-stg"      "sign-download-document.zip"

      # 11) appspec de cortesía (no usado si despliegas directo)
      - |
        echo "[INFO] Writing default appspec.yml"
        cd "$CODEBUILD_SRC_DIR/services/signature-service"
        cat > appspec.yml <<'EOF'
        version: 0.0
        Resources:
          - CreateEnvelope:
              Type: AWS::Lambda::Function
              Properties:
                Name: "lawprotect365-sign-service-create-envelope-stg"
                Alias: "live"
                CurrentVersion: 1
                TargetVersion: 1
        EOF

artifacts:
  files:
    - services/signature-service/sign-*.zip
    - services/signature-service/sign-deps-layer.zip
    - services/signature-service/sign-core-layer.zip
    - services/signature-service/appspec.yml
    - services/signature-service/appspec-*.yml
  discard-paths: yes

// @fileoverview Prisma Schema - Signature Service Core Models
// @summary Relational models for envelopes, signers, invitation tokens and audit
// @description Minimal relational data model to support envelope lifecycle, signer
// evidence, external invitation token rotation/usage, and full audit trail.
// PDFs live in S3 and are referenced by immutable keys and SHA-256 hashes.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserAccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum UserAuditAction {
  USER_REGISTERED
  ROLE_CHANGED
  MFA_TOGGLED
  ACCOUNT_STATUS_CHANGED
  LINKED_IDP
  UNLINKED_IDP
}

enum EnvelopeStatus {
  DRAFT
  READY_FOR_SIGNATURE
  COMPLETED
  DECLINED
  CANCELLED
  EXPIRED
}

enum SigningOrderType {
  OWNER_FIRST
  INVITEES_FIRST
}

enum SignerStatus {
  PENDING
  SIGNED
  DECLINED
}

enum UserRole {
  LAWYER
  CUSTOMER
  ADMIN
  SUPER_ADMIN
  EXTERNAL_USER
}

enum InvitationTokenStatus {
  ACTIVE
  VIEWED
  SIGNED
  REVOKED
  EXPIRED
}

enum DocumentOriginType {
  USER_UPLOAD
  TEMPLATE
}

enum OAuthProvider {
  GOOGLE
  MICROSOFT_365
  APPLE
}

model User {
  id                String            @id @default(uuid()) @db.Uuid
  email             String            @unique @db.Citext
  name              String
  givenName         String?
  lastName          String?
  role              UserRole          @default(CUSTOMER)
  mfaEnabled        Boolean           @default(false)
  lastLoginAt       DateTime?
  status            UserAccountStatus @default(ACTIVE)
  suspendedUntil    DateTime?
  deletedAt         DateTime?
  deactivationReason String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  oauthAccounts     OAuthAccount[]
  createdEnvelopes  SignatureEnvelope[] @relation("EnvelopeCreator")
  envelopeSigners   EnvelopeSigner[]
  userAuditEvents   UserAuditEvent[]

  @@index([status])
  @@index([role])
  @@index([createdAt])
}

model OAuthAccount {
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @db.Uuid
  provider           OAuthProvider
  providerAccountId  String
  createdAt          DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([userId, provider])
  @@index([userId, provider])
}

model SignatureEnvelope {
  id               String           @id @default(uuid()) @db.Uuid
  createdBy        String           @db.Uuid
  title            String
  description      String?
  status           EnvelopeStatus   @default(DRAFT)
  signingOrderType SigningOrderType @default(OWNER_FIRST)
  originType       DocumentOriginType
  templateId       String?
  templateVersion  String?
  sourceKey        String?
  metaKey          String?
  flattenedKey     String?
  signedKey        String?
  sourceSha256     String?
  flattenedSha256  String?
  signedSha256     String?
  sentAt           DateTime?
  completedAt      DateTime?
  cancelledAt      DateTime?
  declinedAt       DateTime?
  declinedBySignerId String?        @db.Uuid
  declinedReason   String?
  expiresAt        DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  creator     User                 @relation("EnvelopeCreator", fields: [createdBy], references: [id])
  signers     EnvelopeSigner[]
  auditEvents SignatureAuditEvent[]
  consents    Consent[]

  @@index([status])
  @@index([createdBy])
}

model EnvelopeSigner {
  id               String  @id @default(uuid()) @db.Uuid
  envelopeId       String  @db.Uuid
  userId           String? @db.Uuid
  isExternal       Boolean @default(false)
  email            String? @db.Citext
  fullName         String?
  invitedByUserId  String? @db.Uuid
  participantRole  String  @default("SIGNER")
  order            Int
  status           SignerStatus @default(PENDING)
  signedAt         DateTime?
  declinedAt       DateTime?
  declineReason    String?
  consentGiven     Boolean?   @default(false)
  consentTimestamp DateTime?
  documentHash     String?
  signatureHash    String?
  signedS3Key      String?
  kmsKeyId         String?
  algorithm        String?
  ipAddress        String?
  userAgent        String?
  location         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  envelope  SignatureEnvelope @relation(fields: [envelopeId], references: [id], onDelete: Cascade)
  user      User?             @relation(fields: [userId], references: [id])

  auditEvents          SignatureAuditEvent[]
  consents             Consent[] @relation("ConsentSigner")
  consentsAsSignature  Consent[] @relation("ConsentSignature")

  @@unique([envelopeId, email])
  @@index([envelopeId, order])
  @@index([userId])
}

model Consent {
  id               String   @id @default(uuid()) @db.Uuid
  envelopeId       String   @db.Uuid
  signerId         String   @db.Uuid
  signatureId      String?  @db.Uuid
  consentGiven     Boolean
  consentTimestamp DateTime
  consentText      String
  ipAddress        String
  userAgent        String
  country          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  envelope  SignatureEnvelope @relation(fields: [envelopeId], references: [id], onDelete: Cascade)
  signer    EnvelopeSigner    @relation("ConsentSigner", fields: [signerId], references: [id], onDelete: Cascade)
  signature EnvelopeSigner?   @relation("ConsentSignature", fields: [signatureId], references: [id])

  @@unique([envelopeId, signerId])
  @@index([signatureId])
}

model InvitationToken {
  id            String  @id @default(uuid()) @db.Uuid
  envelopeId    String  @db.Uuid
  signerId      String  @db.Uuid
  tokenHash     String  @unique
  status        InvitationTokenStatus @default(ACTIVE)
  expiresAt     DateTime?
  sentAt        DateTime?
  lastSentAt    DateTime?
  resendCount   Int      @default(0)
  usedAt        DateTime?
  usedBy        String?
  viewCount     Int      @default(0)
  lastViewedAt  DateTime?
  signedAt      DateTime?
  signedBy      String?  @db.Uuid
  revokedAt     DateTime?
  revokedReason String?
  createdBy     String?  @db.Uuid
  ipAddress     String?
  userAgent     String?
  country       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([envelopeId, signerId])
  @@index([signerId, status])
  @@index([status, expiresAt])
}

model SignatureAuditEvent {
  id          String   @id @default(uuid()) @db.Uuid
  envelopeId  String   @db.Uuid
  signerId    String?  @db.Uuid
  eventType   String
  description String
  userId      String?
  userEmail   String?
  ipAddress   String?
  userAgent   String?
  country     String?
  metadata    Json?
  createdAt   DateTime @default(now())

  envelope SignatureEnvelope @relation(fields: [envelopeId], references: [id], onDelete: Cascade)
  signer   EnvelopeSigner?   @relation(fields: [signerId], references: [id])

  @@index([envelopeId, createdAt])
  @@index([signerId])
  @@index([eventType, createdAt])
}

model UserAuditEvent {
  id          String          @id @default(uuid()) @db.Uuid
  userId      String          @db.Uuid
  action      UserAuditAction
  description String?
  actorId     String?         @db.Uuid
  ipAddress   String?
  userAgent   String?
  metadata    Json?
  createdAt   DateTime        @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([action, createdAt])
}
